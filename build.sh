#!/bin/bash

set -e  # Exit on any error

ENV_NAME="env"

# Ki·ªÉm tra v√† c√†i ƒë·∫∑t dependencies
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python 3 kh√¥ng t√¨m th·∫•y. ƒêang c√†i ƒë·∫∑t..."
    sudo apt update && sudo apt install -y python3 python3-venv python3-pip xvfb
fi

# C√†i Xvfb n·∫øu ch∆∞a c√≥
if ! command -v Xvfb &> /dev/null; then
    echo "üì¶ C√†i ƒë·∫∑t Xvfb..."
    sudo apt install -y xvfb x11-utils
fi

# Ki·ªÉm tra v√† c√†i MongoDB
if ! command -v mongod &> /dev/null; then
    echo "üì¶ C√†i ƒë·∫∑t MongoDB..."
    curl -fsSL https://pgp.mongodb.com/server-7.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor
    echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
    sudo apt update
    sudo apt install -y mongodb-org
    echo "‚úÖ MongoDB ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
else
    echo "‚úÖ MongoDB ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t t·ª´ tr∆∞·ªõc"
fi

# Kh·ªüi ƒë·ªông MongoDB (KH√îNG c√≥ authentication ƒë·ªÉ ƒë∆°n gi·∫£n)
echo "üöÄ Start MongoDB..."
sudo systemctl stop mongod 2>/dev/null || true
sudo systemctl start mongod
sudo systemctl enable mongod
sleep 3

# T·∫Øt authentication
echo "üîì Disable MongoDB authentication..."
sudo sed -i 's/^  authorization: enabled/#  authorization: disabled/g' /etc/mongod.conf || true
sudo systemctl restart mongod
sleep 2

echo "‚úÖ MongoDB setup complete (no authentication)!"

# L·∫•y version Python
PYTHON_VERSION=$(python3 --version | awk '{print $2}')
echo "üîç Detected Python version: $PYTHON_VERSION"

# T·∫°o virtual environment n·∫øu ch∆∞a c√≥
if [ ! -d "$ENV_NAME" ]; then
    echo "üöÄ T·∫°o virtual environment: $ENV_NAME..."
    python3 -m venv $ENV_NAME
    echo "‚úÖ ƒê√£ t·∫°o m√¥i tr∆∞·ªùng $ENV_NAME!"
fi

# K√≠ch ho·∫°t m√¥i tr∆∞·ªùng
echo "‚öôÔ∏è  K√≠ch ho·∫°t m√¥i tr∆∞·ªùng..."
source $ENV_NAME/bin/activate

# Upgrade pip
echo "üì¶ Upgrade pip..."
pip install --upgrade pip

# C√†i ƒë·∫∑t th∆∞ vi·ªán t·ª´ requirements.txt
echo "üì¶ C√†i ƒë·∫∑t c√°c g√≥i trong requirements.txt..."
if [ -f "requirements.txt" ]; then
    # C√†i setuptools tr∆∞·ªõc (v√¨ distutils ƒë√£ b·ªã remove trong Python 3.12)
    pip install --upgrade setuptools
    pip install -r requirements.txt
else
    echo "‚ö†Ô∏è  Warning: requirements.txt not found. Skipping package installation."
fi

# Gi·∫£i n√©n file .deb ƒë·ªÉ l·∫•y file th·ª±c thi
DEB_FILE="./multilogin/multiloginx.deb"
EXTRACT_DIR="./multilogin/extracted"

if [ ! -f "$DEB_FILE" ]; then
    echo "Error: $DEB_FILE not found!"
    exit 1
fi

echo "Extracting $DEB_FILE..."
mkdir -p "$EXTRACT_DIR"
dpkg-deb -x "$DEB_FILE" "$EXTRACT_DIR"

# T√¨m file th·ª±c thi b·∫•t k·ª≥ trong th∆∞ m·ª•c gi·∫£i n√©n
EXECUTABLE=$(find "$EXTRACT_DIR" -type f -executable | head -n 1)
if [ -z "$EXECUTABLE" ]; then
    echo "Error: Could not find any executable in $DEB_FILE!"
    echo "Listing contents of $EXTRACT_DIR for debugging:"
    ls -lR "$EXTRACT_DIR"
    exit 1
fi

# Sao ch√©p file th·ª±c thi v·ªÅ th∆∞ m·ª•c ch·∫°y
EXEC_NAME=$(basename "$EXECUTABLE")
cp "$EXECUTABLE" "./multilogin/$EXEC_NAME"
chmod +x "./multilogin/$EXEC_NAME"

# Ch·∫°y n·ªÅn ·ª©ng d·ª•ng
echo "Starting $EXEC_NAME in the background..."
nohup "./multilogin/$EXEC_NAME" > multiloginx.log 2>&1 &

echo "Cleaning Python cache..."
find . -name "*.pyc" -delete
find . -name "__pycache__" -exec rm -r {} +

echo "üéâ Ho√†n t·∫•t! M√¥i tr∆∞·ªùng $ENV_NAME ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t v√† c√†i ƒë·∫∑t th∆∞ vi·ªán ƒë·∫ßy ƒë·ªß."

# Cleanup function
cleanup() {
    echo "üßπ Cleaning up processes..."
    pkill -f "Xvfb :99" 2>/dev/null || true
    pkill -f "mlx-agent" 2>/dev/null || true
    lsof -ti:5000 | xargs kill -9 2>/dev/null || true
}

# Set trap for cleanup on exit
trap cleanup EXIT

echo "ƒê√≥ng Xvfb hi·ªán t·∫°i n·∫øu c√≥..."
pkill -f "Xvfb :99" 2>/dev/null || echo "Kh√¥ng c√≥ Xvfb n√†o ƒëang ch·∫°y tr√™n display :99"

# Kh·ªüi ƒë·ªông Xvfb (X virtual framebuffer)
echo "Kh·ªüi ƒë·ªông Xvfb..."
Xvfb :99 -screen 0 1920x1080x24 &
XVFB_PID=$!

# Wait for Xvfb to start
sleep 2

# Export DISPLAY cho phi√™n render ·∫£o
export DISPLAY=:99
echo "ƒê√£ export DISPLAY=:99"

# Ch·∫°y agent MLX v·ªõi sudo + nohup ƒë·ªÉ ch·∫°y ng·∫ßm
echo "Kh·ªüi ch·∫°y mlx agent..."
if command -v mlx-agent &> /dev/null; then
    nohup sudo mlx-agent > mlx.log 2>&1 &
    MLX_PID=$!
    echo "MLX agent started with PID: $MLX_PID"
else
    echo "‚ö†Ô∏è  Warning: mlx-agent command not found. Skipping MLX agent startup."
fi

sleep 5

# Ch·∫°y Flask app (gi·∫£ s·ª≠ l√† app.py)
echo "Killing any process running on port 5000..."
lsof -ti:5000 | xargs kill -9 2>/dev/null || echo "No process running on port 5000"

echo "Ch·∫°y Flask app..."
if [ -f "app.py" ]; then
    python3 app.py &
    APP_PID=$!
    echo "‚úÖ Flask app started with PID: $APP_PID"
    echo "üåê App available at: http://localhost:5000"
    wait $APP_PID
else
    echo "‚ùå Error: app.py not found!"
    exit 1
fi

