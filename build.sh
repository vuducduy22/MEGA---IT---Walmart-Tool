#!/bin/bash

set -e  # Exit on any error

ENV_NAME="myenv"

# Initialize conda
echo "üîß Initializing conda..."
eval "$(conda shell.bash hook)"

# Ki·ªÉm tra xem m√¥i tr∆∞·ªùng ƒë√£ t·ªìn t·∫°i ch∆∞a
if conda env list | grep -qE "^$ENV_NAME\s"; then
    echo "‚úÖ M√¥i tr∆∞·ªùng Conda '$ENV_NAME' ƒë√£ t·ªìn t·∫°i. B·ªè qua b∆∞·ªõc t·∫°o."
else
    echo "üöÄ T·∫°o m√¥i tr∆∞·ªùng Conda: $ENV_NAME (Python 3.10)..."
    conda create -n $ENV_NAME python=3.10 -y
    echo "‚úÖ ƒê√£ t·∫°o m√¥i tr∆∞·ªùng $ENV_NAME!"
fi

# K√≠ch ho·∫°t m√¥i tr∆∞·ªùng
echo "‚öôÔ∏è  K√≠ch ho·∫°t m√¥i tr∆∞·ªùng..."
conda activate $ENV_NAME

# C√†i ƒë·∫∑t th∆∞ vi·ªán t·ª´ requirements.txt
echo "üì¶ C√†i ƒë·∫∑t c√°c g√≥i trong requirements.txt..."
if [ -f "requirements.txt" ]; then
    pip install -r requirements.txt
else
    echo "‚ö†Ô∏è  Warning: requirements.txt not found. Skipping package installation."
fi

# Gi·∫£i n√©n file .deb ƒë·ªÉ l·∫•y file th·ª±c thi
DEB_FILE="./multilogin/multiloginx.deb"
EXTRACT_DIR="./multilogin/extracted"

if [ ! -f "$DEB_FILE" ]; then
    echo "Error: $DEB_FILE not found!"
    exit 1
fi

echo "Extracting $DEB_FILE..."
mkdir -p "$EXTRACT_DIR"
dpkg-deb -x "$DEB_FILE" "$EXTRACT_DIR"

# T√¨m file th·ª±c thi b·∫•t k·ª≥ trong th∆∞ m·ª•c gi·∫£i n√©n
EXECUTABLE=$(find "$EXTRACT_DIR" -type f -executable | head -n 1)
if [ -z "$EXECUTABLE" ]; then
    echo "Error: Could not find any executable in $DEB_FILE!"
    echo "Listing contents of $EXTRACT_DIR for debugging:"
    ls -lR "$EXTRACT_DIR"
    exit 1
fi

# Sao ch√©p file th·ª±c thi v·ªÅ th∆∞ m·ª•c ch·∫°y
EXEC_NAME=$(basename "$EXECUTABLE")
cp "$EXECUTABLE" "./multilogin/$EXEC_NAME"
chmod +x "./multilogin/$EXEC_NAME"

# Ch·∫°y n·ªÅn ·ª©ng d·ª•ng
echo "Starting $EXEC_NAME in the background..."
nohup "./multilogin/$EXEC_NAME" > multiloginx.log 2>&1 &

echo "Cleaning Python cache..."
find . -name "*.pyc" -delete
find . -name "__pycache__" -exec rm -r {} +

echo "üéâ Ho√†n t·∫•t! M√¥i tr∆∞·ªùng $ENV_NAME ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t v√† c√†i ƒë·∫∑t th∆∞ vi·ªán ƒë·∫ßy ƒë·ªß."

# Cleanup function
cleanup() {
    echo "üßπ Cleaning up processes..."
    pkill -f "Xvfb :99" 2>/dev/null || true
    pkill -f "mlx-agent" 2>/dev/null || true
    lsof -ti:5000 | xargs kill -9 2>/dev/null || true
}

# Set trap for cleanup on exit
trap cleanup EXIT

echo "ƒê√≥ng Xvfb hi·ªán t·∫°i n·∫øu c√≥..."
pkill -f "Xvfb :99" 2>/dev/null || echo "Kh√¥ng c√≥ Xvfb n√†o ƒëang ch·∫°y tr√™n display :99"

# Kh·ªüi ƒë·ªông Xvfb (X virtual framebuffer)
echo "Kh·ªüi ƒë·ªông Xvfb..."
Xvfb :99 -screen 0 1920x1080x24 &
XVFB_PID=$!

# Wait for Xvfb to start
sleep 2

# Export DISPLAY cho phi√™n render ·∫£o
export DISPLAY=:99
echo "ƒê√£ export DISPLAY=:99"

# Ch·∫°y agent MLX v·ªõi sudo + nohup ƒë·ªÉ ch·∫°y ng·∫ßm
echo "Kh·ªüi ch·∫°y mlx agent..."
if command -v mlx-agent &> /dev/null; then
    nohup sudo mlx-agent > mlx.log 2>&1 &
    MLX_PID=$!
    echo "MLX agent started with PID: $MLX_PID"
else
    echo "‚ö†Ô∏è  Warning: mlx-agent command not found. Skipping MLX agent startup."
fi

sleep 5

# Ch·∫°y Flask app (gi·∫£ s·ª≠ l√† app.py)
echo "Killing any process running on port 5000..."
lsof -ti:5000 | xargs kill -9 2>/dev/null || echo "No process running on port 5000"

echo "Ch·∫°y Flask app..."
if [ -f "app.py" ]; then
    python3 app.py
else
    echo "‚ùå Error: app.py not found!"
    exit 1
fi

