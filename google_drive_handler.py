"""
Google Drive Handler cho vi·ªác upload h√¨nh ·∫£nh s·∫£n ph·∫©m
H·ªó tr·ª£ batch upload v√† folder management
"""

import os
import io
import requests
from typing import List, Optional, Dict
import tempfile
from datetime import datetime

# Google Drive API imports
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload, MediaIoBaseUpload
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.exceptions import RefreshError


class GoogleDriveUploader:
    """Class ƒë·ªÉ handle Google Drive operations"""
    
    # OAuth 2.0 scopes c·∫ßn thi·∫øt
    SCOPES = ['https://www.googleapis.com/auth/drive.file']
    
    def __init__(self, credentials_file: str = 'credentials.json', token_file: str = 'token.json'):
        """
        Initialize Google Drive uploader
        
        Args:
            credentials_file: Path ƒë·∫øn file credentials.json t·ª´ Google Cloud Console
            token_file: Path ƒë·∫øn file token.json (s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông)
        """
        self.credentials_file = credentials_file
        self.token_file = token_file
        self.service = None
        self._authenticate()
    
    def _authenticate(self):
        """Authenticate v·ªõi Google Drive API"""
        creds = None
        
        # Token file ch·ª©a access v√† refresh tokens c·ªßa user
        if os.path.exists(self.token_file):
            creds = Credentials.from_authorized_user_file(self.token_file, self.SCOPES)
        
        # N·∫øu kh√¥ng c√≥ valid credentials, th·ª±c hi·ªán OAuth flow
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                try:
                    creds.refresh(Request())
                except RefreshError:
                    print("Refresh token expired. Need to re-authenticate.")
                    creds = None
            
            if not creds:
                if not os.path.exists(self.credentials_file):
                    raise FileNotFoundError(f"Credentials file not found: {self.credentials_file}")
                
                flow = InstalledAppFlow.from_client_secrets_file(
                    self.credentials_file, self.SCOPES)
                creds = flow.run_local_server(port=0)
            
            # L∆∞u credentials cho l·∫ßn ch·∫°y ti·∫øp theo
            with open(self.token_file, 'w') as token:
                token.write(creds.to_json())
        
        # Build service object
        self.service = build('drive', 'v3', credentials=creds)
        print("‚úÖ Google Drive authentication successful!")
    
    def create_folder(self, folder_name: str, parent_folder_id: Optional[str] = None) -> str:
        """
        T·∫°o folder tr√™n Google Drive
        
        Args:
            folder_name: T√™n folder
            parent_folder_id: ID c·ªßa parent folder (None = root)
            
        Returns:
            str: ID c·ªßa folder m·ªõi t·∫°o
        """
        try:
            folder_metadata = {
                'name': folder_name,
                'mimeType': 'application/vnd.google-apps.folder'
            }
            
            if parent_folder_id:
                folder_metadata['parents'] = [parent_folder_id]
            
            folder = self.service.files().create(body=folder_metadata, fields='id').execute()
            folder_id = folder.get('id')
            
            print(f"‚úÖ Created folder '{folder_name}' with ID: {folder_id}")
            return folder_id
            
        except Exception as e:
            print(f"‚ùå Error creating folder '{folder_name}': {str(e)}")
            raise
    
    def find_folder(self, folder_name: str, parent_folder_id: Optional[str] = None) -> Optional[str]:
        """
        T√¨m folder theo t√™n
        
        Args:
            folder_name: T√™n folder c·∫ßn t√¨m
            parent_folder_id: ID c·ªßa parent folder
            
        Returns:
            Optional[str]: ID c·ªßa folder n·∫øu t√¨m th·∫•y, None n·∫øu kh√¥ng
        """
        try:
            query = f"name='{folder_name}' and mimeType='application/vnd.google-apps.folder'"
            if parent_folder_id:
                query += f" and '{parent_folder_id}' in parents"
            
            results = self.service.files().list(q=query, fields="files(id, name)").execute()
            items = results.get('files', [])
            
            if items:
                return items[0]['id']
            return None
            
        except Exception as e:
            print(f"‚ùå Error finding folder '{folder_name}': {str(e)}")
            return None
    
    def get_or_create_folder(self, folder_name: str, parent_folder_id: Optional[str] = None) -> str:
        """
        L·∫•y folder ID ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
        
        Args:
            folder_name: T√™n folder
            parent_folder_id: ID c·ªßa parent folder
            
        Returns:
            str: ID c·ªßa folder
        """
        folder_id = self.find_folder(folder_name, parent_folder_id)
        if folder_id:
            print(f"üìÅ Found existing folder '{folder_name}': {folder_id}")
            return folder_id
        else:
            return self.create_folder(folder_name, parent_folder_id)
    
    def download_image_from_url(self, image_url: str) -> Optional[io.BytesIO]:
        """
        Download h√¨nh ·∫£nh t·ª´ URL
        
        Args:
            image_url: URL c·ªßa h√¨nh ·∫£nh
            
        Returns:
            Optional[io.BytesIO]: Image data n·∫øu th√†nh c√¥ng, None n·∫øu l·ªói
        """
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            response = requests.get(image_url, headers=headers, timeout=30)
            response.raise_for_status()
            
            # Ki·ªÉm tra content type
            content_type = response.headers.get('content-type', '')
            if not content_type.startswith('image/'):
                print(f"‚ö†Ô∏è Warning: URL may not be an image: {content_type}")
            
            return io.BytesIO(response.content)
            
        except Exception as e:
            print(f"‚ùå Error downloading image from {image_url}: {str(e)}")
            return None
    
    def upload_image_from_url(self, image_url: str, filename: str, folder_id: Optional[str] = None) -> Optional[str]:
        """
        Download h√¨nh ·∫£nh t·ª´ URL v√† upload l√™n Google Drive
        
        Args:
            image_url: URL c·ªßa h√¨nh ·∫£nh
            filename: T√™n file khi l∆∞u tr√™n Drive
            folder_id: ID c·ªßa folder ƒë·ªÉ l∆∞u (None = root)
            
        Returns:
            Optional[str]: ID c·ªßa file ƒë√£ upload, None n·∫øu l·ªói
        """
        try:
            # Download image
            image_data = self.download_image_from_url(image_url)
            if not image_data:
                return None
            
            # Prepare file metadata
            file_metadata = {'name': filename}
            if folder_id:
                file_metadata['parents'] = [folder_id]
            
            # Upload to Drive
            media = MediaIoBaseUpload(image_data, mimetype='image/jpeg', resumable=True)
            file = self.service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id'
            ).execute()
            
            file_id = file.get('id')
            print(f"‚úÖ Uploaded '{filename}' to Google Drive: {file_id}")
            return file_id
            
        except Exception as e:
            print(f"‚ùå Error uploading image '{filename}': {str(e)}")
            return None
    
    def batch_upload_images(self, image_data_list: List[Dict], base_folder_name: str = None, group_by_product: bool = True) -> Dict:
        """
        Batch upload multiple images
        
        Args:
            image_data_list: List of dicts v·ªõi keys: 'url', 'filename', 'product_name'
            base_folder_name: T√™n folder ch√≠nh ƒë·ªÉ ch·ª©a t·∫•t c·∫£ (None = root)
            group_by_product: N·∫øu True, t·∫°o subfolder cho m·ªói product
            
        Returns:
            Dict: Results v·ªõi success_count, failed_count, uploaded_files
        """
        results = {
            'success_count': 0,
            'failed_count': 0,
            'uploaded_files': [],
            'failed_files': [],
            'folders_created': []
        }
        
        try:
            # T·∫°o base folder n·∫øu c·∫ßn
            base_folder_id = None
            if base_folder_name:
                base_folder_id = self.get_or_create_folder(base_folder_name)
            
            print(f"üöÄ Starting batch upload of {len(image_data_list)} images...")
            
            if group_by_product:
                # Group images by product name
                product_groups = {}
                for image_data in image_data_list:
                    product_name = image_data.get('product_name', 'Unknown Product')
                    # Clean product name for folder name
                    import re
                    clean_name = re.sub(r'[^\w\s-]', '', product_name)
                    clean_name = re.sub(r'[-\s]+', '_', clean_name).strip('_')
                    
                    if clean_name not in product_groups:
                        product_groups[clean_name] = []
                    product_groups[clean_name].append(image_data)
                
                print(f"üìÅ Grouped into {len(product_groups)} product folders")
                
                # Create subfolders and upload images
                product_folder_cache = {}
                
                for product_name, images in product_groups.items():
                    print(f"\nüìÅ Processing product: {product_name} ({len(images)} images)")
                    
                    # Create product subfolder
                    if product_name not in product_folder_cache:
                        product_folder_id = self.get_or_create_folder(product_name, base_folder_id)
                        product_folder_cache[product_name] = product_folder_id
                        results['folders_created'].append(product_name)
                        print(f"üìÅ Created subfolder: {product_name}")
                    else:
                        product_folder_id = product_folder_cache[product_name]
                    
                    # Upload images to product subfolder
                    for i, image_data in enumerate(images, 1):
                        image_url = image_data.get('url')
                        filename = image_data.get('filename', f'image_{i}.jpg')
                        
                        if not image_url:
                            print(f"‚ö†Ô∏è Skipping {filename}: No image URL")
                            results['failed_count'] += 1
                            results['failed_files'].append({
                                'filename': filename,
                                'error': 'No image URL',
                                'product': product_name
                            })
                            continue
                        
                        # Upload image to product subfolder
                        file_id = self.upload_image_from_url(image_url, filename, product_folder_id)
                        
                        if file_id:
                            results['success_count'] += 1
                            results['uploaded_files'].append({
                                'filename': filename,
                                'file_id': file_id,
                                'product_name': product_name,
                                'folder': f"{base_folder_name}/{product_name}" if base_folder_name else product_name
                            })
                            print(f"‚úÖ {filename} ‚Üí {product_name}/")
                        else:
                            results['failed_count'] += 1
                            results['failed_files'].append({
                                'filename': filename,
                                'error': 'Upload failed',
                                'product': product_name
                            })
                            print(f"‚ùå Failed: {filename}")
            
            else:
                # Original logic - no grouping
                for i, image_data in enumerate(image_data_list, 1):
                    print(f"\nüì∑ Processing image {i}/{len(image_data_list)}: {image_data.get('filename', 'Unknown')}")
                    
                    image_url = image_data.get('url')
                    filename = image_data.get('filename', f'image_{i}.jpg')
                    
                    if not image_url:
                        print(f"‚ö†Ô∏è Skipping item {i}: No image URL")
                        results['failed_count'] += 1
                        results['failed_files'].append({
                            'filename': filename,
                            'error': 'No image URL'
                        })
                        continue
                    
                    # Upload image
                    file_id = self.upload_image_from_url(image_url, filename, base_folder_id)
                    
                    if file_id:
                        results['success_count'] += 1
                        results['uploaded_files'].append({
                            'filename': filename,
                            'file_id': file_id,
                            'product_name': image_data.get('product_name', '')
                        })
                    else:
                        results['failed_count'] += 1
                        results['failed_files'].append({
                            'filename': filename,
                            'error': 'Upload failed'
                        })
            
            print(f"\nüéâ Batch upload completed!")
            print(f"üìÅ Created {len(results.get('folders_created', []))} product folders")
            print(f"‚úÖ Successful uploads: {results['success_count']}")
            print(f"‚ùå Failed uploads: {results['failed_count']}")
            
            return results
            
        except Exception as e:
            print(f"‚ùå Error in batch upload: {str(e)}")
            return results


def setup_google_drive_credentials():
    """
    H∆∞·ªõng d·∫´n setup Google Drive credentials
    """
    print("""
üîß H∆Ø·ªöNG D·∫™N SETUP GOOGLE DRIVE API:

1. V√†o Google Cloud Console: https://console.cloud.google.com/
2. T·∫°o project m·ªõi ho·∫∑c ch·ªçn existing project
3. Enable Google Drive API:
   - V√†o "APIs & Services" > "Library"
   - T√¨m "Google Drive API" v√† enable
4. T·∫°o credentials:
   - V√†o "APIs & Services" > "Credentials"
   - Click "Create Credentials" > "OAuth client ID"
   - Application type: "Desktop application"
   - Download file JSON v√† rename th√†nh "credentials.json"
   - ƒê·∫∑t file n√†y v√†o th∆∞ m·ª•c g·ªëc c·ªßa project

5. Ch·∫°y script l·∫ßn ƒë·∫ßu s·∫Ω m·ªü browser ƒë·ªÉ authorize
6. File "token.json" s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông cho l·∫ßn sau

üìÅ Files c·∫ßn c√≥:
- credentials.json (t·ª´ Google Cloud Console)
- token.json (t·ª± ƒë·ªông t·∫°o sau l·∫ßn ƒë·∫ßu authorize)
""")


if __name__ == "__main__":
    # Demo usage
    setup_google_drive_credentials()
    
    # Test Google Drive connection
    print("\nüöÄ Testing Google Drive connection...")
    try:
        uploader = GoogleDriveUploader()
        print("üéâ Google Drive connection successful!")
        print("‚úÖ Setup completed! You can now use Google Drive features.")
    except Exception as e:
        print(f"‚ùå Connection failed: {str(e)}")
        print("üí° Make sure you have completed all setup steps above.")
